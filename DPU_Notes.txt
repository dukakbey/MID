DPU
===========
ders 1 :

DPU kaynak kod gitlab : http://192.168.21.86/
Diğer kaynak kodlar: http://192.168.21.102/

throubleShouting:
    - xx.lib does not exist derse manuel olarak linker -> input ayarına ilgili lib dosyasını eklersin.

dll'ler:
	- cublass*.dll , cudnn*.dll ,cufftw*.dll,curand*.dll,cusolver*.dll dosyaları algoritma ile ilgili. Ekran kartı üzerinde machine learning işlerinin yapılmasını sağlıyor.Model input verip model output üretilmesini sağlayan kütüphanelerin dll'leri.
	- nvinfer*.dll, nvm.dll, nvonnxparser*.dll, nvparsers*.dll,nvrtc*.dll, onnx*.dll  dll dosyaları onnx uygulamasının çalışması için gereklidir.	
	- onnxruntime_providers_tensorrt.dll : hızlandırıcıdır. Modelin ekran kartında daha hızlı çalışabilmesi için gerekli. 
	- DPU çalışabilmesi için CUDA kurulu olmalıdır.
	- poco dll'leri 

ONNX:
	- makine öğrenimi ve derin öğrenme modellerinin farklı frameworkler arasında taşınmasını kolaylaştıran açık kaynaklı bir formattır. 
	- ONNX, özellikle farklı platformlar ve frameworkler arasında birlikte çalışabilirliği artırmayı amaçlar. 
	- Makine öğrenimi modelleri genellikle belirli frameworklerde (örneğin, TensorFlow, PyTorch, MXNet, Scikit-learn) eğitilir. Ancak bu frameworkler arasında doğrudan bir geçiş yapmak zor olabilir. ONNX'in amacı, bu modellerin farklı frameworkler arasında kolayca taşınabilmesi ve her bir platformun avantajlarından yararlanabilmesi için ortak bir format sağlamaktır. 
	- ONNX, bir modelin eğitimden üretime geçirilmesini hızlandırır ve model taşınabilirliğini artırır.
	- datapostgresql.dll postgre ile konuşmamızı sağlıyor.
	- pocoJSON*.dll config dosyalarının json formatında kaydedilmesini sağlıyor. 
	- pocoNet64.dll web socket özelliklerini sağlıyor.
	- tensorflow.dll onnx altyapısı yokken kullanılıyordu, şuan kullanılmıyor.
	- vcruntime140_1.dll : visual stdio'nun ihtiyaç duyduğu bir dosya.
POCO:
	- POCO (POrtable COmponents), modern ağ ve internet tabanlı uygulamaları geliştirmek için kullanılan açık kaynaklı bir C++ sınıf kütüphanesidir. 
	- Genellikle C++ için Boost kütüphanesine benzeyen özellikler sunar, ancak daha fazla ağ, internet, veri tabanı, XML, JSON gibi uygulama geliştirme bileşenlerini de içerir.
	- Server tabanlı yazılımlar geliştirilmesini sağlıyor. DPU'da aktif kullanılıyor. 
	- PostgreSQL ile konuşuyor. Alarm analizi yapıyor ve activity count'ları veritabanına kaydediyor.
	- dll'lerin oluşturulması gerekiyor bu nedenle kütüphane derlenmesi gerekiyor ve dokümanlarında anlatılıyor.
	
.pdb (Program Database) Dosyası:
	- Program Database anlamına gelir ve derleme sırasında derleyici tarafından oluşturulan bir dosyadır. Bu dosya, uygulamanızın sembol bilgilerini (fonksiyon isimleri, değişkenler, veri yapıları gibi), kaynak kod satırı numaralarını ve hata ayıklama (debugging) bilgilerini içerir.
	
.bsc (Source Browser) Dosyası:
	- BSC dosyası, Source Browser dosyası anlamına gelir. Bu dosya, derlenen C++ projesindeki sembollerin ve kaynak kodun taranması ve incelenmesi için kullanılan bir dosyadır. 
	- BSC dosyaları, projedeki sembollerin referanslarının hızlı bir şekilde aranmasına yardımcı olur ve Visual Studio gibi IDE'lerde "Go To Definition" ya da "Find All References" gibi özellikleri kullanırken arka planda çalışır.		
	


dpu_config.h:
		- ProcessedDataRecorderParameters: waterfall burada tutuluyor.
BOOST:
	- boost::asio:io_service socket oluşturma ve multithreading işlemler için kullanılır.
	- 

Derleme:
	- release_Od olarak derleniyor.
	
Kütüphaneleri Ekleme:
	- visual studio Additional Include Directories  

================================
ders 2 (kütüphaneler,config files,script.js): 

dpu_main.cpp:
	- _setmaxstdio(2048) : 2 gb anlık olarak dosya açabiliyoruz. DPU özelinde 2gb üstüne çıkmaya çalıştığında işletim sistemi sınır getiriyor, açamıyoruz. Mesela Alarm triger kayıtlarında aynı anda 500 alarm oldu. Waterfall ses kayıtlarında raw data oluşturuluyor. Aynı anda yapılmaya çalışıldığında işletim sistemi sınır koyuyor. Alarmlar oluşmayabilir default 1 GB'di bu ayar ile 2gb'ye çıkarıldı.
	Visual Studio Properties settings:
    Build Event: 
        - Visual studio properties altında yer alan Build event kısmında Command Line adında bir ayarımız var. Burada her build işlemi gerçekleştiğinde çalışacak komut giriyoruz. Bu komut bize "version.h" oluşturuyor.
        -
    Code Generation:
        - Enable Enhanced Instruction Set: Advanced Vector Extensions (X86/X64) (/arch:AVX) olmalı. Bu seçenek seçilmezse uygulama yavaş çalışabilir. 
        - Bu mimaride CPU'da bazı işlemler oluyor ve CPU üzerinde işlemleri hızlandırıyor.
        - Bu sekmede Runtime Library ayarı multithread dll (md) olmalıdır.  

	model_info.json:
		- tensorrt_workspace_size: 104857600 : 10gb gpu'da ayrılacak bellek sınırı. Bu ana modelimizin (midas_model_best_freeze2D.onnx) config dosyasıdır.
		- tensorrt_cache_path:  
			- D://tensorrt_cache_activity_classifier_underground_model*** . Model için gpu'da yapılacak cache'leme için path. 
			- her açılışta modelin gpu'ya taşınmasını engelliyor. Zamanında her açılışta modelin aktarılması 1 dk sürüyordu.
		- feature_extractor: her kanal için 32*48'lik window'lar çıkarıyor. 

	**Sistemde olmayan bir parametre eklendiğinde:
		- öncelikle config.h'a ekle.
		- sonrasında config_parser'da 

	DPUConfigFactory:
		- CreateDefaultZoneParameters: fence ya da underground çalışılacak bölgelerin belirlenmesini sağlıyor.
		- DPU_VERSION : commit'e göre elle git üzerinden güncellenmesi gerekiyor.
			- version.h üzerinde versiyon bilgisi yer alıyor.
		- DPU yazılımı 2 adet sinyal kullanıyor:
			- TerminationSignalHandler: ctrl + c handle edilir.
		- yazılımın çalışması için 3 temel şeye ihtiyaç var: 
			- ilk önce config dosyalarını okuyor (dpu_main.cpp'de yer alıyor). Bunu yapan config_factory :
				- default_config_folder_ = ".\\run_time_files\\config\\default"; :yazılımı ayağa kaldırmak için minimum ihtiyaç duyduğu parametreler.
				- application_config_folder_="C:\\MIDAS\\config\\application";: sahaya göre değişen parametreler.
				- user_config_folder_="C:\\MIDAS\\config\\user"; : kullanıcının sahada değiştirmiş olduğu ayarlar. örneğin: sensörlerin ip'leri, seri 	portları farklı olabilir. saha aynı olsa da bu ayarlar bu katmanda değiştirilir.
				- web_server_root_folder_ = ".\\run_time_files\\html"; : 9980,9981 (9981 son kullanıcı için  detay içermeyen 2. arayüz) sorgulayıcı cihazların ve DPU yazılımının ayarlarını yapabildiğimiz, algoritma parametrelerini,raw dataların takibini yapabildiğimiz değiştirebildiğimiz bir DPU arayüz var. Bu arayüz'ün HTML dosyalrının bulunduğu path.
			- 
		
	script.js:
		- font_awesome: çok sayıda ücretsiz simge kullanımını sağlayan kütüphane.
    
	config_factory: 
		- yazılım ilk olarak config_factory ile config dosyalarının path'lerini input vererek config dosyalarını okuyor.
		- zone oluşturabiliyor. underground ve fence noktalarının belirlenmesini sağlıyor.
        
		- config_factory.h : 
			- ExtractJSONMessageHeader:
				- gelen mesaj'ın header'ına göre işlem yapıyor. 
				- gelen json mesajlarını ayrıştırıyor:
					- on_demand geldiğinde ona göre işlem yapıyor.
					- update 'e tıklandığında bu işlemin update mi save mi olduğunu belirler.
		
		
	dpu_config :
		- config dosyalarındaki
		- dpu_config_factory'de constructor parametlerei olan 3 config dosyasının içeriğindeki parametreler dpu_config.h 'de tutulan değişkenlere map'leniyor. 
		- DPUOutputConfigurationParameters: 
			- dpu_default_algoritma.cfg'de tutuluyor.
			- algoritma ekibi alarm kayıtlarının çıkardığı power'ları dump'lıyor, dosyaya yazıyor.
	- global sabitler global_constant namespace'inde tutuluyor.
	
	- input_priority: Midas 3 için ilk olarak hangi fiber'den data geleceğini gösterir. Genelde default olarak 0
		
	

===================================
ders 3 (dpu_config default parametreler):
dpu_config:
	- RecorderMainParameters: 
		- rolling_raw ve on_demand için 
		- rolling record, ondemand  nerede tutulacağı ve diğer parametlerinin tutulduğu yer.
	
	- PreproccessorParameters:
		- number_of_samples_in_one_windows: 400 => 2 boyutlu matris. Algoritmaya 5150*400'lük veri geliyor.
		- number_of_openmp_threads: işi rahatlatmak için thread kullanımı artırılabilir ama bellek kullanımı artar. 6 görünüyor ama normalde 4 kullanılıyor.
	- PowerNormalizationParameters çoğu sabit değerler. Parametreleri ile çok oynanmıyor.
	- FileDataSourceParameters: 
		- file_datasource_enable : 1 olursa dosyadan okur.
		- file_data_source_loop: 1 olursa aynı data bittiği zaman tekrar tekrar oynatır.
	- ClassificationParameters: 
		- presetler tutuluyor.
		- selected_mod: underground veya fence olabilir.

	- Logger_Parameters:
		- rotation_size: 10485760 (10 GB'ye ulaştığı zaman eski kayıtlı dosyaları sil) 
		- max_size: 
	- PerformanceSettingsParameters:
		- son kullanıcının çok kullandığı parametreleri tutuyor.
		- max_number_of_channels_to_display_on_gui: takip etmek istediğimiz kanal sayısı:
			- Midas2 : 5150
			- Midas3 : [1000,1000] => [1.fiber,2.fiber]
		- zone_parameter:
			- underground:
				-range : hangi kanallar arası underground olacağını seçiyoruz.
			- fence:
				-range : hangi kanallar arası fence olacağını seçiyoruz.
===================================
ders 4 (dpu_config):
dpu_config:
	- fiber_length_in_number_of_channels: (linecut algoritmasının parametresi)
		- Midas2 : 3000
		- Midas3 : [1000,1000] => [1.fiber,2.fiber]
	- zone_parameter: bir yazılım hem fence hem de underground modunda çalışabilir. Zone'lar bunu sağlıyor.
			- underground:
				-range : hangi kanallar arası underground olacağını seçiyoruz.
			- fence:
				-range : hangi kanallar arası fence olacağını seçiyoruz.
			- vector<map<int,int>> map_channels_to_activity_types: her kanal'da aşağıdaki activity'lerin karşılıklarını tutuyor:
					activity_name 		report_activity_flag
				-  	human(1)				0
				- 	vehicle(2) 				0		
				- 	digging	(0)				1
				- 	excavator(3)			2
				- probability accumulator'den dolayı activity_name string değil.
	- DPUConfigFilesDefaultParameters:
		-ExternalInterfaceParameters :  boost tcp modülü ile soket açılıyor ve bu soket üzerinden dpu yazılımının oluşturduğu waterfall ,alarm ,ses verileri, cit mesajları TCP üzerinden MSM yazılımına gönderiliyor.
			- gui_interface_tcp_server_port: 19193
			- enable_cit_messages : 1
			- Örnek Cit mesajları:
				- FPGA ısındı
				- ethernet üzerinden raw data alınamadığı zaman raw_data_not_received mesajı 
		- AlarmAnalyzerParameters: 
			- alarm 'ın derecelendirmesine göre renklendirme yapıyor.
			- alarm kanalının 14 günlük activity count'larını tutar.
		- StatisticRecorderParameters
==========================================
ders 5 (dpu_config, config_factory, model_info.json):
dpu_config:	
	- başta default okunur sonrasında application son olarak da user.
	- ModelFileParameters
		- activity_classifier 
			- tensorrt_cache_path:  
			- D://tensorrt_cache_activity_classifier_underground_model*** . Model için gpu'da yapılacak cache'leme için path. 
			- her açılışta modelin gpu'ya taşınmasını engelliyor. Zamanında her açılışta modelin aktarılması 1 dk sürüyordu.

Underground: number_of_classes = 5
	- digging
	- excavator
	- human
	- vehicle
	- noise

fence: number_of_classes = 3
	- climb
	- cut
	- noise

config_factory:
	- ParseConfigFile:
		- application
		- user
		- model : underground modeli=> midas_model_best_freeze2D
		* 
* user 'da yani arayüzden default'la aynı değer girilirse user'dan bu değer silinir.
* JsonToConfig işlemi yapılırken pocco'nun json kütüphaneleri kullanılıyor. 

* FindDifferenceBetweenDefaultAndUserConfigParameters ?? :
	- Java'da json 'ı sınıfa dönüştüren veya json dosyası ile sınıfı kıyaslayan fonksiyon var ama C++'da yok. Bu nedenle manuel olarak yapılıyor.
===============================================
ders 6 (dpu_config son,) :

bool ParseConfigFile: dosyadan configleri alma işlemini tetikliyor.
void SaveJSONToFile: kullanıcının girdiği ile default arasındaki farkı buluyor.
string JsonToConfig: 
ConfigToJason: web arayüzüne gönderirken.

!!!! dpu_*.cfg dosyalarından configleri okurken dosyada parametrelerde yer alan hataları handle eden try catch bloğu yok. Yazılım patlıyor.

UpdateMaxNumberOfChannelsToDisplayOnGuiAndFiberLengthInNumberOfChannels(0) : 
	- burda hangi zone kaç kanal olacak belirlenir.
	- her zone'un kanal sayısı hesaplanıyor.

communication_path: sorgulayıcı cihazın komut alma ve gönderme path'ini değiştirmek için kullanılan fonksiyonlar.
	- 0: serial port
	- 1: ethernet

interrogator_usage_types:
	- 0 : single
	- 1 : redundant
	- 2 : seperate

interrogator_device_type:
	- 0: midas v1.5
	- 1: midas v2
	- 2: midas v3a
	- 3: midas v3
	- 4: midas v4

fiber_number:
	- 1 : sadece fiber-1'den data gelir.
	- 2 : sadece fiber-2'den data gelir.
	- 3 : fiber-1 ve fiber-2'den data gelir.

underground activity_types:	
	- "digging"
	- "human"
	- "vehicle"
	- "excavator"
	- "noise"
	- "climb"
	- "cut"
	- "rockfall"

WebSocketRequestResponder: DPUServer içerisinde bir sınıf. DPU localhost:99 web arayüzü üzerinden gelen istekler DPUServer'a geliyor.	
DPUServer: 
	- Hem web arayüzünü ayağa kaldıran hem de web arayüzünden gelen istekleri dinleyen dinleyici bir sınıf. 

!! sahada şöyle bir durum var fragmentasyonun yoğun olduğu bazı sensörlerde (diski gitmiş olan,hdd kullanan) ne kadar yazılımda recor'derda (raw data, alarm ticker,ses verisi) multithreading kullansak da bazen waterfall takılabiliyor. çözüm:
	- dpu_default_recorder.cfg'de target_folder'a D'den C'ye taşı.


===================================================
ders 7 : DPU'dan raw data nasıl geliyor kısmına odaklanıldı.:
Dosyadan RawData Okuma:
	file_data_source.cpp:
		- ElementMainLoop() raw data'nın okunduğu kısım.
		- GetFileSize(file_name) :  dosyanın kaç byte olduğunu döndürür.
		-  window_size_in_bytes_ = number_of_samples_in_one_window_(400) * GetDPUConfig()->file_data_source_parameters_.file_data_source_number_of_channels(5150) * 2;
interrogator_device_packet_structere.docx: 
- DPU'nun raw data'yı düzgün bir şekilde parse etmesini sağlayacak adımlar.
- Midas 2 cihazı 5150 kanal ve 1942 hz olarak çalıştığı senaryoda gönderdiği paket yapısı anlatılmaktadır.
- cihaz fragment'ler halinde data yolluyor:
	- her fragment içinde packet_header ve payload kısmı mevcuttur.  
	- 8 adet fragment 1 frame'e karşılık gelir. ve 8 adet fragment tamamlandığı zaman 5150'lik bir kanaldan veri gelmiş oluyor.
	- Midas 2'de 2 fragment var. fragment_count = 2
	- 5150 kanalın (her kanal 2byte) her bir verisinin 8 adet küçük çank'lar halinde geldiğini düşünebiliriz. Biz bunları birleştiriyoruz.
	- her çank'ta header ve payload var
	- struct UDPPacketHeader //veri toplam 14 byte'lık (uint16_t short integer 2 byte , uint32_t : 4 byte): 
	{
		uint16_t message_ID; // normalde unique artan bir değer ama alınan verilerde öyle görünmüyor.
		uint32_t frame_count;// her 8'li fragment (8 fragment 1 frame) için değeri 1 artıyor.  
		uint16_t total_fragment_count;// toplam fragment sayısı midas için 8
		uint16_t frame_fragment_no;// düzenli olarak artıyor. 1'den 8'e kadar artan değerlere sahip oluyor.
		uint16_t info;//CIT verileri için. midas 2 için anlamlı değil sabit değer alıyor. midas 3 için önemli bir parametre: data'nın hangi fiber'den geldiğini gösteriyor. 0 ise 1.fiber, 1 ise 2.fiber.
		uint16_t message_length;//(1470 byte)raw data'nın paket boyutunu gösteriyor. header(14byte) + payload size
	}PACKED;
																				  
	- 1.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 2.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 3.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 4.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 5.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 6.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 7.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
	- 8.fragment toplam 122 byte   = 14 byte header + 108 	byte raw data , 108/2  ->  54 kanal raw data
	
	
	- 8 fragment'te gelen raw data 5150 kanal'a karşılık gelmiyorsa o raw data'yı algoritmaya vermiyor. Raw data kaydı yaparak akışa devam edilmiyor.
	- window_size = 400
	- frame'ler mesaj kuyruğuna veriliyor. Bu mesaj kuyruğu 400 frame'e (windows size) ulaştığında algoritmaya veriliyor.
	- 8. yani Son fragment hariç her fragment'te message lenght 1470 byte. Bu da 728 kanal'ın raw data'sı.
Yukarıda anlatılan mekanizmayı uygulayan sınıf DPU Pipeline:
	- Önce raw data dosya'dan mı okunacak kontrolü yapılıyor. File_data_source_enable: 1 ise dosyadan okunur.
	- File_data_source_enable : 0 ise UDPDataSource'a gider.
	- UDPDataSource işlemini bitirdikten sonra aşağıdaki sınıflar yaratılmalı (hepsi thread olarak çalışıyor):
		- raw_data_mediator: raw data'nın kaydedileceği yer olan recorder.
		- preprocessor : algoritmanın çalışacağı yer.
		- alarm buffer: alarm analizleri yapılacak kısım. 
		- tcp_data_sink: TCP üzerinden waterfall datasının ve alarmların gönderilmesi için egerekli olan soket bağlantısının oluşturulmasını sağlayan sınıf.
Pipeline:
	1) data_source: 
		- udp_data_source: sorgulayıcı cihazdan 4660 portundan gelen verinin alınmasını sağlıyor.
		- file_data_source: sorgulayıcı varmış gibi dosyadan okuma yaparak işlem yapmamızı sağlar.
	2) raw_data_mediator: 
		- upd_data_source işini bitirdikten sonra data'yı buraya verir.
		- Amacı raw data kaydı yapmak.  
		- alınan raw data buraya gönderilir. 2GB'lik dosyalar halinde kayıt yapılır.
		- raw data kaydı D:\MIDAS_RECORDS diskine yapılır.
		- 2 günlük kayıt yapar. 2 günlük kaydın boyutu 3TB. 3TB'a ulaştığı zaman eski kayıtları sistematik olarak siler.
		- RollingRaw : sürekli kayıt.
		- OnDemandRecorder: İçinde OnDemandRecorder mekanizması da var. localhost 9980 üzerinden isteğe bağlı kayıt alınması sağlanıyor.
	   recorder:
		- raw data'yı kaydeden sınıftır.
		- alarm bazlı kayıt, waterfall, ses verisi.. bunların hepsi recorder sınıfından türüyor.
		- info_recorder sınıfında multi_inheritance var. Bunun nedeni bazı on_demand ve rolling_data sınıflarındaki info kayıtlarını oluşturmak için oluşturulan bir class. 
	   rolling_raw_data_recorder:
		- boost_singleProducer, boost_singleConsumer mesaj kuyruğu sınıfları kullanılıyor. raw_data_mediator bu kuyruğa yazıyor.
	3) preprocessor: kaydedilen data preproccessor'a yollanıyor. Bu sayede algoritma alarmlar, waterfall.. üretiyor.
	4) alarm_buffer: alarmlar önce alarm analizi'ne tabi tutuluyor ve renklendirme seviyesi belirleniyor. Burdan sonra alarmlar tcp_data_sink'e gidiyorç
	5) tcp_data_sink: tcp üzerinden datayı (alarm, waterfall ...) gönderiyor.
!!! Biz datayı little endian formatında okuyoruz.
udp_data_source:
	- char* packet_buffer_; raw data burdan alınır.
	- burdan raw data 400*5150 2byte olarak iletiliyor.
	- Init fonksiyonunda port bilgisini okuyor.
		- port bilgisini okuyor. 4660 port'undan sorgulayıcı cihaz raw data'yı basıyor.
		- max_window_size_in_bytes_ (65507 tutulmuş fakat o kadar büyük veri yok) : number_of_samples_in_one_window_ * MAX_NUMBER_OF_CHANNELS_IN_ONE_SAMPLE * 2
		- number_of_samples_in_one_window_= 400  bir window'da kaç Frame tutulacağını gösterir.
		- packet_buffer_ : cihaz'dan gelen raw data'nın tutulduğu yer. raw data'nın kendisini tutuyor.
		- packet_header_size : 14 byte
		-  !!! 10km için km artarsa değişmeli mi ?  :boost::asio::socket_base::receive_buffer_size option(10 * sample_frequency_ * MAX_NUMBER_OF_CHANNELS_IN_ONE_SAMPLE * 2); ???
	- Byte'lar little endian'a göre okunuyor.
	- run Process'i çalıştırır ve process sürekli çalışan bir fonksiyon:
		- StartReceive: sorgulayıcı cihaz'dan verinin sürekli alındığı yer.
		- max_packet_size_in_bytes_: 65507 garanti olsun diye girilmiş ama o kadar byte gelmiyor.ama 1470 byte geliyor.
	- HandleReceive: gelen mesaj messageQ'ya kopyalanıyor.
		- InitializeState: cihaz'dan gelen kanal sayısını hesaplıyor. 5150 kanal olup olmadığını test ediyor:
			- 1.fragment toplam 1470 byte  = 14 byte header + 1456  byte raw data , 1456/2 -> 728 kanal raw data
			- number_of_channels_in_frame_read_ : kanal sayısının tutulduğu değişken.
			- kanal sayısı hesaplandıktan sonra resetparameters = 0 oluyor ve else kısmındaki işlemler yapılıyor.
		- ComputeFrameOffsetHashTable:
			- fragment'ler alınırken ardışık olup olmadığını hast tablosuna kontrol eden hata varsa düzelten bir fonksiyon.
		- udp_packet_header: ???
		- write_offset gelen 8 fragment 5150 kanallık  verilerin hangi offset'lere yazılacağı bilgisi.
		- SEPERATE: bu durumda farklı bir hesaplama var çünkü hihaz datayı bir fiber 1'den bir fiber'2 den olacak şekilde karışık yolluyor:
			- FragmentSzArr[i] fiber 1 ve fiber 2'den karışık gelen datanın byte offset'ini düzgün yazılmasını sağlıyor.
	- WritePacketToWindowsBuffer: doğru offset'ler sağlandıktan sonra packet_buffer_'a yani 5150*400'lük veriyi yazıyor.
	- ConcealLostSamples: 
		- kurcalandı fakat mekanizması ve implemantasyonu çözülemedi. 
		- Kullanılmadığında zaman saçma hatalar meydana geliyor. 
		- Bu fonksiyon olmadığı zaman diskte olan bozulmalarda aynı veri sürekli geliyor ve waterfall'da yatayda çizgiler oluşuyor.
	- 400 frame'den sonra bu if'e girer: if (end_cnt_diff > 0 || end_cnt_diff < INT_MIN)
		- Data'yı diğer bloklara yollar.
		- Data'nın kayıt işlemini sağlar.
========================================
ders 8: DPU'dan raw data nasıl geliyor kısmına odaklanıldı.:
UDPDataSource -> RawDataMediator -> PreProcessor -> alarm_buffer -> TCPDataSink
	- akış DPUPipeline sınıfı üzerinden başlıyor.
		- Eğer FileDataSource enable ise dosyadan okuyor. Değilse UDPDataSource üzerinden raw data okunur.
	- bu paketler farklı thread'ler halinde birbirleriyle sürekli messageQ üzerinden haberleşiyor. 
	- Kuyruğa raw_data'nın pointer'ları yazılıyor.
	- İlk 3'ü ortak bir messageQ kullanılıyor. 
	- Bu 3 mesajın ortak kullanıdığı messageQ preproccessor üzerinde yer alıyor: AllocateBuffers(). Kuyrukta 20*400*5150 2byte'lık veri saklanıyor.
- GetNextElement(): pipeline'da bir sonraki elemanı temsil eder.
- udp_data_source :
	- 400 * 5150 'lik bufferlar ile data yollanıyor.
	- ConcealLostSamples() : tam ne işe yaradığı bilinmiyor. Kullanılmadığında/yorum satırına alındığında uygulama garip bir tepki veriyor. Bu fonksiyon olmazsa waterfall yatayda çok sayıda çizgi atıyor.
	- last_intact_sample_buffer_ : eski 5150*400'lük datanın kopyasını tutuyor hash tablosundaki kaymalar durumunda datayı kopyalıyor.
	- HandleReceive:
		- InitializeState(UDP_packet_header_): paket uzunluğu hesaplamaları yapılıp kontroller tamamlanınca reset_parameters_ 0 oluyor ve dosyaya yazma işlemine geçiyor.
		-  WritePacketToWindowBuffer(packet_buffer_, window_buffer_, write_offset, bytes_transferred): offset ayarlandıktan sonra bellekte verinin yazıldığı yer burası.
	- ParseUDPPacketHeader(): gelen paketler big endian ise ntoh fonksiyonları ile little endian'a dönüştürme işlemi yapıyor.
- free_buffer_chunk_ (5150*400*2byte),free_buffer_queue_: 
	- data_source, raw_data_mediator, preprocessor ortak bir messageQ kullanıyor. Bu messageQ preproccessor.cpp içerisinde yer alıyor.
	- windows = 400*5150*2byte => 400 * kanal sayısı* 2byte
	- messageQ 20*400*5150*2byte'lık veri saklar.(20 window (400 frame))
- window_buffer_:
	- gösterdiği yer free_buffer_chunk_ ile aynı.
- raw_data_mediator:
	- D diskinde raw_data kaydı yapıyor.
	- Bu Aracı bir sınıf asıl işi yapacak sınıflara raw_data yolluyor(rolling_raw_data_recorder,ondemand_raw_data_recorder). 
	- ConfigureByPreviousElement(DPUConfig* dpu_config): bu sınıfı tetikleyen bir önceki sınıf tarafından çalıştırılıyor.
	- şu kod arayüzde raw data çizdirebilmek için gerekli. Raw data kaydının yapıldığı yerler buaralar: 
		if (GetDPUConfig()->iu_communicator_message_queues_->iu_communicator_message_queue_->write_available() >= (number_of_channels_in_one_sample_ * sizeof(int16_t))) 
		{
			GetDPUConfig()->iu_communicator_message_queues_->iu_communicator_message_queue_->push(full_buffer_chunk_.buffer_pointer, (number_of_channels_in_one_sample_ * sizeof(int16_t)));
		}
		GetNextElement()->full_buffer_queue_->push((char*)&full_buffer_chunk_, sizeof(BufferChunk)); 
		
		- ONDEMAND_RAW_DATA_RECORDER, ROLLING_RAW_DATA_RECORDER sınıflarına veriler gönderiliyor.
	
- recorder:
	- alarm bazlı kayıt, waterfall, ses verisi.. bunların hepsi recorder sınıfından türüyor.
		- info_recorder sınıfında multi_inheritance var. Bunun nedeni bazı on_demand ve rolling_data sınıflarındaki info kayıtlarını oluşturmak için oluşturulan bir class. 
	-raw_data_recorder:
		- rolling_raw_data_recorder:  
			- esas cihazdan gelen data'nın kayıt edildiği sınıf.
			- kendi kuruğu var : record_message_queue_ = new RollingWaterfallDataMessageQueue(MESSAGE_QUEUE_SIZE_IN_BYTES);
				- bu kuyruk: message_queue -> record_message_queue->rolling_record_message_queue->raw_data-> rolling_raw_data_message_queue.h içerisinde.
			- number_of_channels_offset: 
				- boş sinyalin hangi kanalda bittiği bilgisini tutar.
				- belli kanallar boş sinyal yolluyor. O kanalların bittiği yer belirlenip bittiği yerden anlamlı olan sinyali algoritma koduna vermek.
				- Anlamsız kodu kayıtta görmek ve algoritma kodlarına vermek istemiyorum.
			- asıl dosyaya yazma işleminin olduğu yer:
				- void RollingRawDataRecorder::WriteDataToFile(char* raw_data) {
					if (record_file_window_cnt_ == RAW_DATA_ROLLING_RECORD_TIME_STAMP_INTERVAL) {
				}
			- sliced_raw_data_: boş sinyallere göre kaydırma işlemi yaparak boş sinyalleri temizlemiş oluyor.
			- kayıt yaparken 2gb 'lik dosyaya 2 gb'den küçük veri yazılırsa boş kısmı 0'lar ile doldurulur.
	DWORD bytes_written;
	WriteFile(data_record_file_,write_data_, writing_packet_byte_size_,&bytes_written,nullptr);
	record_file_window_cnt_ = 0;
}
	- free_buffer_chunk_:
	- full_buffer_chunk_:
PipeLine hikaye:
	- elementler (data_source,raw_data_mediator) ortak bir mesaj kuyruğu kullanılıyor. Sürekli iletişim halindeler.
	- raw_data 3 element arasında iletiliyor. Sıra şu şekilde: data_source -> raw_data_mediator -> preproccessor
	- data_source kuyrukta boş yer buldukça yazıyor=> raw_data_mediator ise bu veriyi okuyor ve okudukça kuyruğu boşaltıyor. İşi bitince raw data'yı tekrar kuyruğun boş alanına yazıyor=> preprocessor kuyruğun dolu olan yerini alıyor. Raw data'yı aldıktan sonra o yeri geri kuyruğa iade ediyor. 
=============================================== 
ders 9: rolling_raw_data kısmına odaklanıldı.:
	- 2gb olacak şekilde kayıtlar alınıyor.
==========================================
ders 10: ondemand_raw_data_recorder kısmına odaklanıldı.:
* udp_data_source'dan gelen data raw_data_mediator'a geliyor. Mediator de aldığı raw data'ları rolling_raw_data'ya ve onDemand_raw_data'ya yolluyor.
* element_main_loop  data'nın yazılğı fonksiyon.
!! fragmentasyon problemini çözen işlemi on_demand'a da eklenmesi öneriliyor.
! writing_packet_byte_size_: Diske veriyi büyük boyutta yazmayı sağlıyor. çok düşük boyutta çank'lar halinde veri yazıldığı zaman diskin bozulma olasılığı artıyor.
! max_number_of_gui  ?
- windows_size_in_bytes: max_number_of_gui *400* 2 byte  bir iterasyonda kaydedilecek veri boyutu.

===============================================
ders 11: ondemand_raw_data kısmına odaklanıldı.:
* Midas 2 cihazı hep 5150 kanal olarak ayarlanıyor. sahada 3000 kanal olsa bile 5150 olarak ayarlanır. frekans değeri değişmemesi için.

writeDataToFile:
	- buffer_read_ptr: 5*5150'nin pointer'ı
	- number_of_channels_offset: 
	- max_number_of_channels_to_display_on_gui : 400*5150'lik verinin her kanaldan 400*max_number_of_channels_to_display_on_gui'yi almasını sağlıyor.
	- record_byte_ptr
CurrentRollingRecordFileOperations():
	- dosya kapatma işlemi burda oluyor.
	- stop'a basıldığında veya autoStop açıksa timer ile yazılım durduruluyor.
	- 
WriteRecordDescriptionFile():
	- cihaz tipi ne, cihazın modu ne, record_date, cihaz kullanım tipi gibi bilgileri dosyaya yazıyor.

pipeline devam- data source: 
	-*** run_time_files=>config=>default=>dpu_default_development.cfg içinde file_datasource_enable'ı 1 yaparsak artık file'dan okur.

processor: 
	- udp_data_source -> raw_data_mediator -> preproccessor şeklinde akış ile buraya raw data geliyor.  processor'un amacı bu verilerin işlenmesi.
	- ham veri waterfall, ses, spektram , alarm'a dönüştürülüyor. Preprocessor içinde tetikleniyor.
	- number_of_channels_offset: seperate modda anlamsız ,düz sinyali bittiği yer bilgisi offset'liyor.
offset = max_number_of_channels - max_number_of_gui

dpu_default_communication.cfg :
	- "fibers" altında "channel_number" hiç değişmiyor. Değişirse frekans değişir. dpu_default_performance_settings.cfg ile oynanır. "PerformanceSettingsParameters" altında midas*_usage değiştirilir.

multi_input_zone_ofset: çok kullanılan birşey değil.
============================
ders 12 (preproccessor configürasyon parametreleri):

dpu_default_communication.cfg:
	- "fibers" altında "channel_number" hiç değişmiyor. Nanotam altyüklenici firma değiştirilmesini önermiyor. Performans sıkıntıları oluşabiliyor.

mod'lar:
	- single: tek kablo 
		- 5150 kanal
	- seperate: çift kablo
		- her kablo 1000 kanal 
	- redundant: 
	 	- 2 kablo 1000 kanal çember yapıda.

preprocessor.cpp:
	- Data önce raw_data_mediator'a gelir sonrasında preprocessor'a gelir. Process initialize edilerek sürekli raw_data_mediator üzerinden sürekli raw data gelecek şekilde başlatılıyor.
	- number_of_openmp_threads_: sayısı 4. Artırılırsa yazılımın daha hızlı bir şekilde çalışması sağlanır ama cpu kullanımı artar. 
	- 

int16_t :short integer

line_cut_detection,line_cut algotiması:
	- Hat kesilmesini kontrol ediyor.
	- kesilirse kesildiği yerden  fiber'in sonlandığı yere kadar olan kısmı diğer fiber'den alıyoruz.
	- redundant ve single'da tek bir line_cut algoritması çalışıyor.
	- seperate mod'da 2 line_cut algoritması çalışıyor. Fiber 1 ve Fiber 2 hat kesilmesini kontrol ediyor.

===================================================
ders 13(preproccessor):
weak_signal_detector:
	- Bir süre önceki sinyal ile karşılaştırarak sinyalda azalma veya kopma olduğunu saptayan bir algoritma. 

preproccessor'e raw datanın geldiği değişken :
	- int16_t* in_buf = (int16_t*)full_buffer_chunk_.buffer_pointer;
	- 
 
absolute_channels ?:
	- 0-2000 veya 0-5150 arası bir değerdir.
	
activity_count:
	- ?? 
===========================
ders 14 (preproccessor):
alarm bazlı kayıt:
	- ALARM_TRIGGERED_RAW_DATA_RECORDER
	- ALARM_TRIGGERED_AUDIO_RECORDER
	- ALARM_TRIGGERED_WATERFALL_RECORDER

rolling_waterfall_recorder.cpp:
	- WriteDataToFile: max_number_of_gui kadar veriyi (5150 kanal) direk yazıyor. Windows mantığı olmadığı için daha kolay bir yazma işlemi.

tcp_messages.h:
	- WaterfallMessageHeader
===============================
ders 15 (preproccessor):
	- 

============================
ders 17 (alarm_analyzer):
	- 


============================
ders 18 (alarm_analyzer):

============================
ders 19 (alarm_analyzer, iu_communicator-MIDAS3_Komut_Mesaj_Parametre_2021 dokümanındaki komutlar anlatıldı):
MIDAS3_Komut_Mesaj_Parametre_2021.10.01.xlsx dokümanı ? 
SVGL17 Yazılım Tasarım Dokümanı_RevB_V2.docx  ??
 
- iu_communicator: cihaz ile seri iletişimi sağlayan komut göndermemizi ve almamızı sağlayan sınıf.
- Sorgulayıcı cihazdan raw_data alabilmek için bu listedeki komutları göndermek gerekiyor. (MIDAS3_Komut_Mesaj_Parametre_2021)
	- setDataParameters() : 
		- Cihaz içindeki veri akışı ile ilgili tüm parametreleri belirlemeye yarar.
		- data hangi fiber'den gelecek.Single mı redundant mı çalışacak gibi ayarlar için kullanılır.


============================
ders 20 (dpu ile ilgili anlatım tamamlandı.,iu_communicator(30.dk)):
Genel:
	- C:/MIDAS/tools/nanotam_arayüz: burda Nanotam'ın kendi cihazları için ürettiği arayüzler yer alıyor. Cihaza seri porttan komut yollayabiliyoruz.


SVGL17 Yazılım Tasarım Tanımları Dokümanı_RevB_V2  ?? 

============================
ders 21 (iu_communicator):
	- 
	- 


============================
ders 22 (iu_communicator):
	- 




============================
ders 23 (iu_communicator,dpu_server.cpp):
	- 



============================
ders 24 (request_responder,dpu_server, web_socket_request_responder.cpp):
	- 


============================
ders 26 (.js kodlar):
	- run_time_files -> html->9980 .js kodlar


============================
ders 27 (.js kodlar,arif yazılımı entegrasyonu,tcp_data_sink.cpp):
Genel:
	- run_time_files -> html->9980 .js kodlar
tcp_data_sink:	
	- tcp_data_sink port : "gui_interface_tcp_server_port": 19193, burdan msm'ye mesaj yollanıyor. MSM'ye akış bu port üzerinden oluyor.


